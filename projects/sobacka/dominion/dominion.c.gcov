        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   388110:    8:int compare(const void* a, const void* b) {
   388110:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   388110:   11:  if (*(int*)a < *(int*)b)
   103496:   12:    return -1;
   284614:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
    20013:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    20013:   44:  SelectStream(1);
    20013:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    20013:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    11378:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     8635:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    94975:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   949742:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   863402:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     8634:   73:  if (numPlayers == 2)
        -:   74:    {
     2846:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     5788:   77:  else if (numPlayers == 3)
        -:   78:    {
     2970:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     2818:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     8634:   87:  if (numPlayers == 2)
        -:   88:    {
     2846:   89:      state->supplyCount[estate] = 8;
     2846:   90:      state->supplyCount[duchy] = 8;
     2846:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     5788:   95:      state->supplyCount[estate] = 12;
     5788:   96:      state->supplyCount[duchy] = 12;
     5788:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     8634:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8634:  102:  state->supplyCount[silver] = 40;
     8634:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   181314:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
  1424610:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    	{
  1338270:  110:    	  if (kingdomCards[j] == i){
        -:  111:    	     //check if card is a 'Victory' Kingdom card
    86340:  112:    	    if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
        8:  113:    		        if (numPlayers == 2){ 
        3:  114:    		          state->supplyCount[i] = 8; 
        -:  115:    		        }
        -:  116:    		        else{ 
        1:  117:                  state->supplyCount[i] = 12; 
        -:  118:                }
        -:  119:    		  }
        -:  120:    	    else{
    86336:  121:    		    state->supplyCount[i] = 10;
        -:  122:    		  }
    86340:  123:    	    break;
        -:  124:    	  }
        -:  125:    	  else    //card is not in the set choosen for the game
        -:  126:    	  {
  1251930:  127:    	    state->supplyCount[i] = -1;
        -:  128:    	  }
        -:  129:    	}
        -:  130:    }
        -:  131:
        -:  132:  ////////////////////////
        -:  133:  //supply intilization complete
        -:  134:
        -:  135:  //set player decks
    34508:  136:  for (i = 0; i < numPlayers; i++)
        -:  137:    {
    25874:  138:      state->deckCount[i] = 0;
   103496:  139:      for (j = 0; j < 3; j++)
        -:  140:    	{
    77622:  141:    	  state->deck[i][j] = estate;
    77622:  142:    	  state->deckCount[i]++;
        -:  143:    	}
   206992:  144:      for (j = 3; j < 10; j++)
        -:  145:    	{
   181118:  146:    	  state->deck[i][j] = copper;
   181118:  147:    	  state->deckCount[i]++;		
        -:  148:    	}
        -:  149:    }
        -:  150:
        -:  151:  //shuffle player decks
    34508:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
    25874:  154:      if ( shuffle(i, state) < 0 )
        -:  155:	{
    #####:  156:	  return -1;
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //draw player hands
    34508:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {  
        -:  163:      //initialize hand size to zero
    25874:  164:      state->handCount[i] = 0;
    25874:  165:      state->discardCount[i] = 0;
        -:  166:      //draw 5 cards
        -:  167:      // for (j = 0; j < 5; j++)
        -:  168:      //	{
        -:  169:      //	  drawCard(i, state);
        -:  170:      //	}
        -:  171:    }
        -:  172:  
        -:  173:  //set embargo tokens to 0 for all supply piles
   241752:  174:  for (i = 0; i <= treasure_map; i++)
        -:  175:    {
   233118:  176:      state->embargoTokens[i] = 0;
        -:  177:    }
        -:  178:
        -:  179:  //initialize first player's turn
     8634:  180:  state->outpostPlayed = 0;
     8634:  181:  state->phase = 0;
     8634:  182:  state->numActions = 1;
     8634:  183:  state->numBuys = 1;
     8634:  184:  state->playedCardCount = 0;
     8634:  185:  state->whoseTurn = 0;
     8634:  186:  state->handCount[state->whoseTurn] = 0;
        -:  187:  //int it; move to top
        -:  188:
        -:  189:  //Moved draw cards to here, only drawing at the start of a turn
    51804:  190:  for (it = 0; it < 5; it++){
    43170:  191:    drawCard(state->whoseTurn, state);
        -:  192:  }
        -:  193:
     8634:  194:  updateCoins(state->whoseTurn, state, 0);
        -:  195:
     8634:  196:  return 0;
        -:  197:}
        -:  198:
    27647:  199:int shuffle(int player, struct gameState *state) {
        -:  200: 
        -:  201:
        -:  202:  int newDeck[MAX_DECK];
    27647:  203:  int newDeckPos = 0;
        -:  204:  int card;
        -:  205:  int i;
        -:  206:
    27647:  207:  if (state->deckCount[player] < 1)
     1773:  208:    return -1;
    25874:  209:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  210:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  211:
   310488:  212:  while (state->deckCount[player] > 0) {
   258740:  213:    card = floor(Random() * state->deckCount[player]);
   258740:  214:    newDeck[newDeckPos] = state->deck[player][card];
   258740:  215:    newDeckPos++;
   853435:  216:    for (i = card; i < state->deckCount[player]-1; i++) {
   594695:  217:      state->deck[player][i] = state->deck[player][i+1];
        -:  218:    }
   258740:  219:    state->deckCount[player]--;
        -:  220:  }
   284614:  221:  for (i = 0; i < newDeckPos; i++) {
   258740:  222:    state->deck[player][i] = newDeck[i];
   258740:  223:    state->deckCount[player]++;
        -:  224:  }
        -:  225:
    25874:  226:  return 0;
        -:  227:}
        -:  228:
    20004:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  230:{	
        -:  231:  int card;
    20004:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
    20004:  235:  if (state->phase != 0)
        -:  236:    {
    #####:  237:      return -1;
        -:  238:    }
        -:  239:	
        -:  240:  //check if player has enough actions
    20004:  241:  if ( state->numActions < 1 )
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //get card played
    20004:  247:  card = handCard(handPos, state);
        -:  248:	
        -:  249:  //check if selected card is an action
    20004:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:    {
       62:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //play card
    19942:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //reduce number of actions
    19942:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    19942:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:	
    19942:  267:  return 0;
        -:  268:}
        -:  269:
    #####:  270:int buyCard(int supplyPos, struct gameState *state) {
        -:  271:  int who;
        -:  272:  if (DEBUG){
        -:  273:    printf("Entering buyCard...\n");
        -:  274:  }
        -:  275:
        -:  276:  // I don't know what to do about the phase thing.
        -:  277:
    #####:  278:  who = state->whoseTurn;
        -:  279:
    #####:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:      printf("You do not have any buys left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:      printf("There are not any of that type of card left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG) 
        -:  290:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:  
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:    
    #####:  306:  return 0;
        -:  307:}
        -:  308:
    #####:  309:int numHandCards(struct gameState *state) {
    #####:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
    20004:  313:int handCard(int handPos, struct gameState *state) {
    20004:  314:  int currentPlayer = whoseTurn(state);
    20004:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
    20003:  318:int supplyCount(int card, struct gameState *state) {
    20003:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
    #####:  322:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  323:  int i;
    #####:  324:  int count = 0;
        -:  325:
    #####:  326:  for (i = 0; i < state->deckCount[player]; i++)
        -:  327:    {
    #####:  328:      if (state->deck[player][i] == card) count++;
        -:  329:    }
        -:  330:
    #####:  331:  for (i = 0; i < state->handCount[player]; i++)
        -:  332:    {
    #####:  333:      if (state->hand[player][i] == card) count++;
        -:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->discardCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->discard[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:  return count;
        -:  342:}
        -:  343:
    79952:  344:int whoseTurn(struct gameState *state) {
    79952:  345:  return state->whoseTurn;
        -:  346:}
        -:  347:
    #####:  348:int endTurn(struct gameState *state) {
        -:  349:  int k;
        -:  350:  int i;
    #####:  351:  int currentPlayer = whoseTurn(state);
        -:  352:  
        -:  353:  //Discard hand
    #####:  354:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  355:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  356:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  357:  }
    #####:  358:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  359:    
        -:  360:  //Code for determining the player
    #####:  361:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  362:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  363:  }
        -:  364:  else{
    #####:  365:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  366:  }
        -:  367:
    #####:  368:  state->outpostPlayed = 0;
    #####:  369:  state->phase = 0;
    #####:  370:  state->numActions = 1;
    #####:  371:  state->coins = 0;
    #####:  372:  state->numBuys = 1;
    #####:  373:  state->playedCardCount = 0;
    #####:  374:  state->handCount[state->whoseTurn] = 0;
        -:  375:
        -:  376:  //int k; move to top
        -:  377:  //Next player draws hand
    #####:  378:  for (k = 0; k < 5; k++){
    #####:  379:    drawCard(state->whoseTurn, state);//Draw a card
        -:  380:  }
        -:  381:
        -:  382:  //Update money
    #####:  383:  updateCoins(state->whoseTurn, state , 0);
        -:  384:
    #####:  385:  return 0;
        -:  386:}
        -:  387:
    #####:  388:int isGameOver(struct gameState *state) {
        -:  389:  int i;
        -:  390:  int j;
        -:  391:	
        -:  392:  //if stack of Province cards is empty, the game ends
    #####:  393:  if (state->supplyCount[province] == 0)
        -:  394:    {
    #####:  395:      return 1;
        -:  396:    }
        -:  397:
        -:  398:  //if three supply pile are at 0, the game ends
    #####:  399:  j = 0;
    #####:  400:  for (i = 0; i < 25; i++)
        -:  401:    {
    #####:  402:      if (state->supplyCount[i] == 0)
        -:  403:	{
    #####:  404:	  j++;
        -:  405:	}
        -:  406:    }
    #####:  407:  if ( j >= 3)
        -:  408:    {
    #####:  409:      return 1;
        -:  410:    }
        -:  411:
    #####:  412:  return 0;
        -:  413:}
        -:  414:
    #####:  415:int scoreFor (int player, struct gameState *state) {
        -:  416:
        -:  417:  int i;
    #####:  418:  int score = 0;
        -:  419:  //score from hand
    #####:  420:  for (i = 0; i < state->handCount[player]; i++)
        -:  421:    {
    #####:  422:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  423:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  424:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  425:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  426:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  428:    }
        -:  429:
        -:  430:  //score from discard
    #####:  431:  for (i = 0; i < state->discardCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  434:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  435:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  436:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  437:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:    }
        -:  440:
        -:  441:  //score from deck
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:    {
    #####:  444:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  445:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  446:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  447:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  448:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  450:    }
        -:  451:
    #####:  452:  return score;
        -:  453:}
        -:  454:
    #####:  455:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  456:  int i;	
        -:  457:  int j;
        -:  458:  int highScore;
        -:  459:  int currentPlayer;
        -:  460:
        -:  461:  //get score for each player
    #####:  462:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  463:    {
        -:  464:      //set unused player scores to -9999
    #####:  465:      if (i >= state->numPlayers)
        -:  466:	{
    #####:  467:	  players[i] = -9999;
        -:  468:	}
        -:  469:      else
        -:  470:	{
    #####:  471:	  players[i] = scoreFor (i, state);
        -:  472:	}
        -:  473:    }
        -:  474:
        -:  475:  //find highest score
    #####:  476:  j = 0;
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
    #####:  479:      if (players[i] > players[j])
        -:  480:	{
    #####:  481:	  j = i;
        -:  482:	}
        -:  483:    }
    #####:  484:  highScore = players[j];
        -:  485:
        -:  486:  //add 1 to players who had less turns
    #####:  487:  currentPlayer = whoseTurn(state);
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if ( players[i] == highScore && i > currentPlayer )
        -:  491:	{
    #####:  492:	  players[i]++;
        -:  493:	}
        -:  494:    }
        -:  495:
        -:  496:  //find new highest score
    #####:  497:  j = 0;
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] > players[j] )
        -:  501:	{
    #####:  502:	  j = i;
        -:  503:	}
        -:  504:    }
    #####:  505:  highScore = players[j];
        -:  506:
        -:  507:  //set winners in array to 1 and rest to 0
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] == highScore )
        -:  511:	{
    #####:  512:	  players[i] = 1;
        -:  513:	}
        -:  514:      else
        -:  515:	{
    #####:  516:	  players[i] = 0;
        -:  517:	}
        -:  518:    }
        -:  519:
    #####:  520:  return 0;
        -:  521:}
        -:  522:
    63120:  523:int drawCard(int player, struct gameState *state)
        -:  524:{	int count;
        -:  525:  int deckCounter;
    63120:  526:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  527:    
        -:  528:    //Step 1 Shuffle the discard pile back into a deck
        -:  529:    int i;
        -:  530:    //Move discard to deck
     1773:  531:    for (i = 0; i < state->discardCount[player];i++){
    #####:  532:      state->deck[player][i] = state->discard[player][i];
    #####:  533:      state->discard[player][i] = -1;
        -:  534:    }
        -:  535:
     1773:  536:    state->deckCount[player] = state->discardCount[player];
     1773:  537:    state->discardCount[player] = 0;//Reset discard
        -:  538:
        -:  539:    //Shufffle the deck
     1773:  540:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  541:   
        -:  542:    if (DEBUG){//Debug statements
        -:  543:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  544:    }
        -:  545:    
     1773:  546:    state->discardCount[player] = 0;
        -:  547:
        -:  548:    //Step 2 Draw Card
     1773:  549:    count = state->handCount[player];//Get current player's hand count
        -:  550:    
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Current hand count: %d\n", count);
        -:  553:    }
        -:  554:    
     1773:  555:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  556:
     1773:  557:    if (deckCounter == 0)
     1773:  558:      return -1;
        -:  559:
    #####:  560:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  561:    state->deckCount[player]--;
    #####:  562:    state->handCount[player]++;//Increment hand count
        -:  563:  }
        -:  564:
        -:  565:  else{
    61347:  566:    int count = state->handCount[player];//Get current hand count for player
        -:  567:    int deckCounter;
        -:  568:    if (DEBUG){//Debug statements
        -:  569:      printf("Current hand count: %d\n", count);
        -:  570:    }
        -:  571:
    61347:  572:    deckCounter = state->deckCount[player];//Create holder for the deck count
    61347:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    61347:  574:    state->deckCount[player]--;
    61347:  575:    state->handCount[player]++;//Increment hand count
        -:  576:  }
        -:  577:
    61347:  578:  return 0;
        -:  579:}
        -:  580:
    #####:  581:int getCost(int cardNumber)
        -:  582:{
    #####:  583:  switch( cardNumber ) 
        -:  584:    {
        -:  585:    case curse:
    #####:  586:      return 0;
        -:  587:    case estate:
    #####:  588:      return 2;
        -:  589:    case duchy:
    #####:  590:      return 5;
        -:  591:    case province:
    #####:  592:      return 8;
        -:  593:    case copper:
    #####:  594:      return 0;
        -:  595:    case silver:
    #####:  596:      return 3;
        -:  597:    case gold:
    #####:  598:      return 6;
        -:  599:    case adventurer:
    #####:  600:      return 6;
        -:  601:    case council_room:
    #####:  602:      return 5;
        -:  603:    case feast:
    #####:  604:      return 4;
        -:  605:    case gardens:
    #####:  606:      return 4;
        -:  607:    case mine:
    #####:  608:      return 5;
        -:  609:    case remodel:
    #####:  610:      return 4;
        -:  611:    case smithy:
    #####:  612:      return 4;
        -:  613:    case village:
    #####:  614:      return 3;
        -:  615:    case baron:
    #####:  616:      return 4;
        -:  617:    case great_hall:
    #####:  618:      return 3;
        -:  619:    case minion:
    #####:  620:      return 5;
        -:  621:    case steward:
    #####:  622:      return 3;
        -:  623:    case tribute:
    #####:  624:      return 5;
        -:  625:    case ambassador:
    #####:  626:      return 3;
        -:  627:    case cutpurse:
    #####:  628:      return 4;
        -:  629:    case embargo: 
    #####:  630:      return 2;
        -:  631:    case outpost:
    #####:  632:      return 5;
        -:  633:    case salvager:
    #####:  634:      return 4;
        -:  635:    case sea_hag:
    #####:  636:      return 4;
        -:  637:    case treasure_map:
    #####:  638:      return 4;
        -:  639:    }
        -:  640:	
    #####:  641:  return -1;
        -:  642:}
        -:  643:
        -:  644:/*
        -:  645:My functions that I have separated out for assignment 2
        -:  646:*/
        -:  647:
        -:  648://Smithy
        1:  649:void playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  650:{
        -:  651:  //draw 3 cards
        -:  652:  int i;
        -:  653:  //BUG: < to <=
        5:  654:  for (i = 0; i <= 3; i++)
        -:  655:  {
        4:  656:    drawCard(currentPlayer, state);
        -:  657:  }
        -:  658:      
        -:  659:  //discard card from hand
        1:  660:  discardCard(handPos, currentPlayer, state, 0);
        1:  661:  return;
        -:  662:}
        -:  663:
        -:  664://Adventurer
        1:  665:void playAdventurer(struct gameState *state, int currentPlayer)
        -:  666:{
        1:  667:  int z=0;
        1:  668:  int drawntreasure=0;
        -:  669:  int cardDrawn;
        -:  670:  int temphand[MAX_HAND];
        4:  671:  while(drawntreasure<2){
        2:  672:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  673:      shuffle(currentPlayer, state);
        -:  674:    }
        2:  675:    drawCard(currentPlayer, state);
        2:  676:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  677:    //BUG: gold to silver
        2:  678:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == silver)
        2:  679:      drawntreasure++;
        -:  680:    else{
    #####:  681:      temphand[z]=cardDrawn;
    #####:  682:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  683:      z++;
        -:  684:    }
        -:  685:  }
        -:  686:
        2:  687:  while(z-1>=0){
    #####:  688:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  689:    z=z-1;
        -:  690:  }
        1:  691:  return;
        -:  692:}
        -:  693:
        -:  694:// Council Room
        1:  695:void playCouncilRoom(struct gameState *state, int currentPlayer, int handPos)
        -:  696:{
        -:  697:  //+4 Cards
        -:  698:  int i;
        5:  699:  for (i = 0; i < 4; i++)
        -:  700:  {
        4:  701:    drawCard(currentPlayer, state);
        -:  702:  }
        -:  703:  
        -:  704:  //+1 Buy
        -:  705:  //BUG: decrement should be increment
        1:  706:  state->numBuys--;
        -:  707:  
        -:  708:  //Each other player draws a card
        3:  709:  for (i = 0; i < state->numPlayers; i++)
        -:  710:  {
        2:  711:    if ( i != currentPlayer )
        -:  712:      {
        1:  713:        drawCard(i, state);
        -:  714:      }
        -:  715:  }
        -:  716:  
        -:  717:  //put played card in played card pile
        1:  718:  discardCard(handPos, currentPlayer, state, 0);
        -:  719:  
        1:  720:  return;
        -:  721:}
        -:  722:
        -:  723://Feast
    #####:  724:void playFeast(struct gameState *state, int currentPlayer, int choice1)
        -:  725:{
        -:  726:  //gain card with cost up to 5
        -:  727:  //Backup hand
        -:  728:  int i;
        -:  729:  int x;
        -:  730:  int temphand[MAX_HAND];
    #####:  731:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  732:  {
    #####:  733:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  734:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  735:  }
        -:  736:  //Backup hand
        -:  737:
        -:  738:  //Update Coins for Buy
    #####:  739:  updateCoins(currentPlayer, state, 5);
    #####:  740:  x = 1;//Condition to loop on
    #####:  741:  while( x == 1) {//Buy one card
    #####:  742:    if (supplyCount(choice1, state) <= 0){
        -:  743:      if (DEBUG)
        -:  744:        printf("None of that card left, sorry!\n");
        -:  745:
        -:  746:      if (DEBUG){
        -:  747:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  748:      }
        -:  749:    }
    #####:  750:    else if (state->coins < getCost(choice1)){
    #####:  751:      printf("That card is too expensive!\n");
        -:  752:
        -:  753:      if (DEBUG){
        -:  754:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  755:      }
        -:  756:    }
        -:  757:    else{
        -:  758:
        -:  759:      if (DEBUG){
        -:  760:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:      }
        -:  762:
    #####:  763:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  764:      x = 0;//No more buying cards
        -:  765:
        -:  766:      if (DEBUG){
        -:  767:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  768:      }
        -:  769:    }
        -:  770:  }     
        -:  771:
        -:  772:  //Reset Hand
    #####:  773:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  774:    state->hand[currentPlayer][i] = temphand[i];
    #####:  775:    temphand[i] = -1;
        -:  776:  }
        -:  777:            
    #####:  778:  return;
        -:  779:}
        -:  780:
        -:  781://mine
    #####:  782:int playMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  783:{
        -:  784:  int j;
        -:  785:  int i;
    #####:  786:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  789:  {
    #####:  790:    return -1;
        -:  791:  }
        -:  792:    
    #####:  793:  if (choice2 > treasure_map || choice2 < curse)
        -:  794:  {
        -:  795:    //BUG: returns 1 instead of -1
    #####:  796:    return 1;
        -:  797:  }
        -:  798:
    #####:  799:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  800:  {
    #####:  801:    return -1;
        -:  802:  }
        -:  803:
    #####:  804:  gainCard(choice2, state, 2, currentPlayer);
        -:  805:
        -:  806:  //discard card from hand
    #####:  807:  discardCard(handPos, currentPlayer, state, 0);
        -:  808:
        -:  809:  //discard trashed card
    #####:  810:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  811:  {
    #####:  812:    if (state->hand[currentPlayer][i] == j)
        -:  813:    {
    #####:  814:      discardCard(i, currentPlayer, state, 0);      
    #####:  815:      break;
        -:  816:    }
        -:  817:  }  
        -:  818:  
    #####:  819:  return 0;
        -:  820:}
        -:  821:
        -:  822:
        -:  823://What does this return
        -:  824:// 0 on success
        -:  825://-1 on error?
    19942:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:  int i;
        -:  829:  int j;
        -:  830:  int k;
        -:  831:  //int x;
        -:  832:  int index;
    19942:  833:  int currentPlayer = whoseTurn(state);
    19942:  834:  int nextPlayer = currentPlayer + 1;
        -:  835:
    19942:  836:  int tributeRevealedCards[2] = {-1, -1};
        -:  837:  //int temphand[MAX_HAND];// moved above the if statement
        -:  838:  //int drawntreasure=0;
        -:  839:  //int cardDrawn;
        -:  840:  //int z = 0;// this is the counter for the temp hand
    19942:  841:  if (nextPlayer > (state->numPlayers - 1))
        -:  842:  {
    #####:  843:    nextPlayer = 0;
        -:  844:  }
        -:  845:  
        -:  846:	
        -:  847:  //uses switch to select card and perform actions
    19942:  848:  switch( card ) 
        -:  849:    {
        -:  850:    case adventurer:
        1:  851:      playAdventurer(state, currentPlayer);
        1:  852:      return 0;
        -:  853:			
        -:  854:    case council_room:
        -:  855:      //+4 Cards
        1:  856:      playCouncilRoom(state, currentPlayer, handPos);
        1:  857:      return 0;
        -:  858:
        -:  859:    case feast:
        -:  860:      //gain card with cost up to 5
    #####:  861:      playFeast(state, currentPlayer, choice1);
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case gardens:
    #####:  865:      return -1;
        -:  866:			
        -:  867:    case mine:
    #####:  868:      if(playMine(state, currentPlayer, choice1, choice2, handPos) == 0)
        -:  869:      {
    #####:  870:        return 0;
        -:  871:      }
        -:  872:      else
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:			
        -:  877:    case remodel:
    #####:  878:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  881:    	{
    #####:  882:    	  return -1;
        -:  883:    	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 0, currentPlayer);
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  892:	    {
    #####:  893:  	    if (state->hand[currentPlayer][i] == j)
        -:  894:  	    {
    #####:  895:  	      discardCard(i, currentPlayer, state, 0);			
    #####:  896:  	      break;
        -:  897:  	    }
        -:  898:    	}
    #####:  899:      return 0;
        -:  900:		
        -:  901:    case smithy:
        -:  902:      //+3 Cards
        1:  903:      playSmithy(state, currentPlayer, handPos);
        1:  904:      return 0;
        -:  905:		
        -:  906:    case village:
        -:  907:      //+1 Card
    19939:  908:      drawCard(currentPlayer, state);
        -:  909:			
        -:  910:      //+2 Actions
    19939:  911:      state->numActions = state->numActions + 2;
        -:  912:			
        -:  913:      //discard played card from hand
    19939:  914:      discardCard(handPos, currentPlayer, state, 0);
    19939:  915:      return 0;
        -:  916:		
        -:  917:    case baron:
    #####:  918:      state->numBuys++;//Increase buys by 1!
    #####:  919:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  920:	int p = 0;//Iterator for hand!
    #####:  921:	int card_not_discarded = 1;//Flag for discard set!
    #####:  922:	while(card_not_discarded){
    #####:  923:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  924:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  925:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  926:	    state->discardCount[currentPlayer]++;
    #####:  927:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  928:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  929:	    }
    #####:  930:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  931:	    state->handCount[currentPlayer]--;
    #####:  932:	    card_not_discarded = 0;//Exit the loop
        -:  933:	  }
    #####:  934:	  else if (p > state->handCount[currentPlayer]){
        -:  935:	    if(DEBUG) {
        -:  936:	      printf("No estate cards in your hand, invalid choice\n");
        -:  937:	      printf("Must gain an estate if there are any\n");
        -:  938:	    }
    #####:  939:	    if (supplyCount(estate, state) > 0){
    #####:  940:	      gainCard(estate, state, 0, currentPlayer);
    #####:  941:	      state->supplyCount[estate]--;//Decrement estates
    #####:  942:	      if (supplyCount(estate, state) == 0){
    #####:  943:		isGameOver(state);
        -:  944:	      }
        -:  945:	    }
    #####:  946:	    card_not_discarded = 0;//Exit the loop
        -:  947:	  }
        -:  948:			    
        -:  949:	  else{
    #####:  950:	    p++;//Next card
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:			    
        -:  955:      else{
    #####:  956:	if (supplyCount(estate, state) > 0){
    #####:  957:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  958:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  959:	  if (supplyCount(estate, state) == 0){
    #####:  960:	    isGameOver(state);
        -:  961:	  }
        -:  962:	}
        -:  963:      }
        -:  964:	    
        -:  965:      
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case great_hall:
        -:  969:      //+1 Card
    #####:  970:      drawCard(currentPlayer, state);
        -:  971:			
        -:  972:      //+1 Actions
    #####:  973:      state->numActions++;
        -:  974:			
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
    #####:  977:      return 0;
        -:  978:		
        -:  979:    case minion:
        -:  980:      //+1 action
    #####:  981:      state->numActions++;
        -:  982:			
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
        -:  985:			
    #####:  986:      if (choice1)		//+2 coins
        -:  987:	{
    #####:  988:	  state->coins = state->coins + 2;
        -:  989:	}
        -:  990:			
    #####:  991:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  992:	{
        -:  993:	  //discard hand
    #####:  994:	  while(numHandCards(state) > 0)
        -:  995:	    {
    #####:  996:	      discardCard(handPos, currentPlayer, state, 0);
        -:  997:	    }
        -:  998:				
        -:  999:	  //draw 4
    #####: 1000:	  for (i = 0; i < 4; i++)
        -: 1001:	    {
    #####: 1002:	      drawCard(currentPlayer, state);
        -: 1003:	    }
        -: 1004:				
        -: 1005:	  //other players discard hand and redraw if hand size > 4
    #####: 1006:	  for (i = 0; i < state->numPlayers; i++)
        -: 1007:	    {
    #####: 1008:	      if (i != currentPlayer)
        -: 1009:		{
    #####: 1010:		  if ( state->handCount[i] > 4 )
        -: 1011:		    {
        -: 1012:		      //discard hand
    #####: 1013:		      while( state->handCount[i] > 0 )
        -: 1014:			{
    #####: 1015:			  discardCard(handPos, i, state, 0);
        -: 1016:			}
        -: 1017:							
        -: 1018:		      //draw 4
    #####: 1019:		      for (j = 0; j < 4; j++)
        -: 1020:			{
    #####: 1021:			  drawCard(i, state);
        -: 1022:			}
        -: 1023:		    }
        -: 1024:		}
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case steward:
    #####: 1031:      if (choice1 == 1)
        -: 1032:	{
        -: 1033:	  //+2 cards
    #####: 1034:	  drawCard(currentPlayer, state);
    #####: 1035:	  drawCard(currentPlayer, state);
        -: 1036:	}
    #####: 1037:      else if (choice1 == 2)
        -: 1038:	{
        -: 1039:	  //+2 coins
    #####: 1040:	  state->coins = state->coins + 2;
        -: 1041:	}
        -: 1042:      else
        -: 1043:	{
        -: 1044:	  //trash 2 cards in hand
    #####: 1045:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1046:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1047:	}
        -: 1048:			
        -: 1049:      //discard card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case tribute:
    #####: 1054:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1055:	if (state->deckCount[nextPlayer] > 0){
    #####: 1056:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	  state->deckCount[nextPlayer]--;
        -: 1058:	}
    #####: 1059:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1060:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1061:	  state->discardCount[nextPlayer]--;
        -: 1062:	}
        -: 1063:	else{
        -: 1064:	  //No Card to Reveal
        -: 1065:	  if (DEBUG){
        -: 1066:	    printf("No cards to reveal\n");
        -: 1067:	  }
        -: 1068:	}
        -: 1069:      }
        -: 1070:	    
        -: 1071:      else{
    #####: 1072:	if (state->deckCount[nextPlayer] == 0){
    #####: 1073:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1074:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1075:	    state->deckCount[nextPlayer]++;
    #####: 1076:	    state->discard[nextPlayer][i] = -1;
    #####: 1077:	    state->discardCount[nextPlayer]--;
        -: 1078:	  }
        -: 1079:			    
    #####: 1080:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1081:	} 
    #####: 1082:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:	state->deckCount[nextPlayer]--;
    #####: 1085:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1086:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1087:	state->deckCount[nextPlayer]--;
        -: 1088:      }    
        -: 1089:		       
    #####: 1090:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1091:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1092:	state->playedCardCount++;
    #####: 1093:	tributeRevealedCards[1] = -1;
        -: 1094:      }
        -: 1095:
    #####: 1096:      for (i = 0; i <= 2; i ++){
    #####: 1097:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1098:	  state->coins += 2;
        -: 1099:	}
        -: 1100:		    
    #####: 1101:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1102:	  drawCard(currentPlayer, state);
    #####: 1103:	  drawCard(currentPlayer, state);
        -: 1104:	}
        -: 1105:	else{//Action Card
    #####: 1106:	  state->numActions = state->numActions + 2;
        -: 1107:	}
        -: 1108:      }
        -: 1109:	    
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case ambassador:
    #####: 1113:      j = 0;		//used to check if player has enough cards to discard
        -: 1114:
    #####: 1115:      if (choice2 > 2 || choice2 < 0)
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
    #####: 1120:      if (choice1 == handPos)
        -: 1121:	{
    #####: 1122:	  return -1;
        -: 1123:	}
        -: 1124:
    #####: 1125:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	{
    #####: 1127:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1128:	    {
    #####: 1129:	      j++;
        -: 1130:	    }
        -: 1131:	}
    #####: 1132:      if (j < choice2)
        -: 1133:	{
    #####: 1134:	  return -1;				
        -: 1135:	}
        -: 1136:
        -: 1137:      if (DEBUG) 
        -: 1138:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1139:
        -: 1140:      //increase supply count for choosen card by amount being discarded
    #####: 1141:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1142:			
        -: 1143:      //each other player gains a copy of revealed card
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
        -: 1145:	{
    #####: 1146:	  if (i != currentPlayer)
        -: 1147:	    {
    #####: 1148:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1149:	    }
        -: 1150:	}
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
        -: 1155:      //trash copies of cards returned to supply
    #####: 1156:      for (j = 0; j < choice2; j++)
        -: 1157:	{
    #####: 1158:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1159:	    {
    #####: 1160:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1161:		{
    #####: 1162:		  discardCard(i, currentPlayer, state, 1);
    #####: 1163:		  break;
        -: 1164:		}
        -: 1165:	    }
        -: 1166:	}			
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case cutpurse:
        -: 1171:
    #####: 1172:      updateCoins(currentPlayer, state, 2);
    #####: 1173:      for (i = 0; i < state->numPlayers; i++)
        -: 1174:	{
    #####: 1175:	  if (i != currentPlayer)
        -: 1176:	    {
    #####: 1177:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1178:		{
    #####: 1179:		  if (state->hand[i][j] == copper)
        -: 1180:		    {
    #####: 1181:		      discardCard(j, i, state, 0);
    #####: 1182:		      break;
        -: 1183:		    }
    #####: 1184:		  if (j == state->handCount[i])
        -: 1185:		    {
    #####: 1186:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1187:			{
        -: 1188:			  if (DEBUG)
        -: 1189:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1190:			}	
    #####: 1191:		      break;
        -: 1192:		    }		
        -: 1193:		}
        -: 1194:					
        -: 1195:	    }
        -: 1196:				
        -: 1197:	}				
        -: 1198:
        -: 1199:      //discard played card from hand
    #####: 1200:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1201:
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:		
        -: 1205:    case embargo: 
        -: 1206:      //+2 Coins
    #####: 1207:      state->coins = state->coins + 2;
        -: 1208:			
        -: 1209:      //see if selected pile is in play
    #####: 1210:      if ( state->supplyCount[choice1] == -1 )
        -: 1211:	{
    #####: 1212:	  return -1;
        -: 1213:	}
        -: 1214:			
        -: 1215:      //add embargo token to selected supply pile
    #####: 1216:      state->embargoTokens[choice1]++;
        -: 1217:			
        -: 1218:      //trash card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case outpost:
        -: 1223:      //set outpost flag
    #####: 1224:      state->outpostPlayed++;
        -: 1225:			
        -: 1226:      //discard card
    #####: 1227:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1228:      return 0;
        -: 1229:		
        -: 1230:    case salvager:
        -: 1231:      //+1 buy
    #####: 1232:      state->numBuys++;
        -: 1233:			
    #####: 1234:      if (choice1)
        -: 1235:	{
        -: 1236:	  //gain coins equal to trashed card
    #####: 1237:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1238:	  //trash card
    #####: 1239:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1240:	}
        -: 1241:			
        -: 1242:      //discard card
    #####: 1243:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1244:      return 0;
        -: 1245:		
        -: 1246:    case sea_hag:
    #####: 1247:      for (i = 0; i < state->numPlayers; i++){
    #####: 1248:	if (i != currentPlayer){
    #####: 1249:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1250:	  state->discardCount[i]++;
    #####: 1251:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1252:	}
        -: 1253:      }
    #####: 1254:      return 0;
        -: 1255:		
        -: 1256:    case treasure_map:
        -: 1257:      //search hand for another treasure_map
    #####: 1258:      index = -1;
    #####: 1259:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1260:	{
    #####: 1261:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1262:	    {
    #####: 1263:	      index = i;
    #####: 1264:	      break;
        -: 1265:	    }
        -: 1266:	}
    #####: 1267:      if (index > -1)
        -: 1268:	{
        -: 1269:	  //trash both treasure cards
    #####: 1270:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1271:	  discardCard(index, currentPlayer, state, 1);
        -: 1272:
        -: 1273:	  //gain 4 Gold cards
    #####: 1274:	  for (i = 0; i < 4; i++)
        -: 1275:	    {
    #####: 1276:	      gainCard(gold, state, 1, currentPlayer);
        -: 1277:	    }
        -: 1278:				
        -: 1279:	  //return success
    #####: 1280:	  return 1;
        -: 1281:	}
        -: 1282:			
        -: 1283:      //no second treasure_map found in hand
    #####: 1284:      return -1;
        -: 1285:    }
        -: 1286:	
    #####: 1287:  return -1;
        -: 1288:}
        -: 1289:
    19941: 1290:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1291:{
        -: 1292:	
        -: 1293:  //if card is not trashed, added to Played pile 
    19941: 1294:  if (trashFlag < 1)
        -: 1295:    {
        -: 1296:      //add card to played pile
    19941: 1297:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    19941: 1298:      state->playedCardCount++;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //set played card to -1
    19941: 1302:  state->hand[currentPlayer][handPos] = -1;
        -: 1303:	
        -: 1304:  //remove card from player's hand
    19941: 1305:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1306:    {
        -: 1307:      //reduce number of cards in hand
     1773: 1308:      state->handCount[currentPlayer]--;
        -: 1309:    }
    18168: 1310:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1311:    {
        -: 1312:      //reduce number of cards in hand
    #####: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:  else 	
        -: 1316:    {
        -: 1317:      //replace discarded card with last card in hand
    18168: 1318:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1319:      //set last card to -1
    18168: 1320:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1321:      //reduce number of cards in hand
    18168: 1322:      state->handCount[currentPlayer]--;
        -: 1323:    }
        -: 1324:	
    19941: 1325:  return 0;
        -: 1326:}
        -: 1327:
    20003: 1328:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1329:{
        -: 1330:  //Note: supplyPos is enum of choosen card
        -: 1331:	
        -: 1332:  //check if supply pile is empty (0) or card is not used in game (-1)
    20003: 1333:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1334:    {
       62: 1335:      return -1;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //added card for [whoseTurn] current player:
        -: 1339:  // toFlag = 0 : add to discard
        -: 1340:  // toFlag = 1 : add to deck
        -: 1341:  // toFlag = 2 : add to hand
        -: 1342:
    19941: 1343:  if (toFlag == 1)
        -: 1344:    {
    #####: 1345:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1346:      state->deckCount[player]++;
        -: 1347:    }
    19941: 1348:  else if (toFlag == 2)
        -: 1349:    {
    19941: 1350:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    19941: 1351:      state->handCount[player]++;
        -: 1352:    }
        -: 1353:  else
        -: 1354:    {
    #####: 1355:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1356:      state->discardCount[player]++;
        -: 1357:    }
        -: 1358:	
        -: 1359:  //decrease number in supply pile
    19941: 1360:  state->supplyCount[supplyPos]--;
        -: 1361:	 
    19941: 1362:  return 0;
        -: 1363:}
        -: 1364:
    28580: 1365:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1366:{
        -: 1367:  int i;
        -: 1368:	
        -: 1369:  //reset coin count
    28580: 1370:  state->coins = 0;
        -: 1371:
        -: 1372:  //add coins for each Treasure card in player's hand
   213042: 1373:  for (i = 0; i < state->handCount[player]; i++)
        -: 1374:  {
   184462: 1375:      if (state->hand[player][i] == copper)
        -: 1376:    	{
   147368: 1377:    	  state->coins += 1;
        -: 1378:    	}
    37094: 1379:      else if (state->hand[player][i] == silver)
        -: 1380:    	{
    #####: 1381:    	  state->coins += 2;
        -: 1382:    	}
    37094: 1383:      else if (state->hand[player][i] == gold)
        -: 1384:    	{
       10: 1385:    	  state->coins += 3;
        -: 1386:    	}	
        -: 1387:  }	
        -: 1388:
        -: 1389:  //add bonus
    28580: 1390:  state->coins += bonus;
        -: 1391:
    28580: 1392:  return 0;
        -: 1393:}
        -: 1394:
        -: 1395:
        -: 1396://end of dominion.c
        -: 1397:
